// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/a-berahman/go-time/02_unitTest/convertor (interfaces: Printer)

// Package mock_convertor is a generated GoMock package.
package mock_convertor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrinter is a mock of Printer interface.
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter.
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance.
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// MoveZeroes mocks base method.
func (m *MockPrinter) MoveZeroes(arg0 []int) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveZeroes", arg0)
	ret0, _ := ret[0].([]int)
	return ret0
}

// MoveZeroes indicates an expected call of MoveZeroes.
func (mr *MockPrinterMockRecorder) MoveZeroes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveZeroes", reflect.TypeOf((*MockPrinter)(nil).MoveZeroes), arg0)
}
